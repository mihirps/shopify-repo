{%- if settings.notification_text != blank or settings.countdown_timer_enable or settings.notification_button_name != blank -%}
<script>
  // Store notification content
  const notificationContent = {
    text: {{ settings.notification_text | strip_html | strip | json }},
    countdown: {% if settings.countdown_timer_enable %}true{% else %}false{% endif %},
    countdownDate: {{ settings.countdown_date | json }},
    buttonName: {{ settings.notification_button_name | json }},
    buttonUrl: {{ settings.notification_button_url | json }}
  };

  // Create and inject notification bar after page load
  function createNotificationBar() {
    const bar = document.createElement('div');
    bar.className = 'top-notification-bar';
    bar.innerHTML = `
      <div class="container">
        <div class="row">
          <div class="col-12">
            <div class="notification-entry text-center">
              <div class="notification-entry-inner">
                <div class="notification-text" data-notification-text></div>
                ${notificationContent.countdown ? `
                <div class="product-countdown grid-countdown topbar-countdown" data-countdown="${notificationContent.countdownDate}" loading="lazy"></div>
                ` : ''}
                ${notificationContent.buttonName ? `
                <div class="notification-button-wrapper">
                  <a class="notification-button" href="${notificationContent.buttonUrl}" loading="lazy">${notificationContent.buttonName}</a>
                </div>
                ` : ''}
              </div>
              <button class="notification-close-btn" aria-label="Close notification"><i class="pe-7s-close"></i></button>
            </div>
          </div>
        </div>
      </div>
    `;

    // Insert at the beginning of body
    document.body.insertBefore(bar, document.body.firstChild);

    // Set text content after a delay
    setTimeout(() => {
      const textElement = bar.querySelector('[data-notification-text]');
      if (textElement) {
        textElement.textContent = notificationContent.text;
      }
    }, 100);
  }

  // Wait for page to be fully loaded
  if (document.readyState === 'complete') {
    setTimeout(createNotificationBar, 1000);
  } else {
    window.addEventListener('load', () => setTimeout(createNotificationBar, 1000));
  }
</script>

<style>
  .top-notification-bar {
    position: relative;
    z-index: 100;
    will-change: transform;
    transform: translateZ(0);
    background: var(--notification-bg, #ffffff);
  }
  .notification-entry {
    padding: 10px 0;
  }
  .notification-text {
    display: inline-block;
    font-size: 14px;
    line-height: 1.4;
    margin: 0;
    padding: 0;
    color: var(--notification-text-color, #000000);
  }
  .notification-button-wrapper {
    display: inline-block;
    margin-left: 10px;
  }
  .notification-button {
    display: inline-block;
    text-decoration: none;
    color: var(--notification-button-color, #000000);
  }
  @media (max-width: 767px) {
    .notification-text {
      font-size: 12px;
    }
  }
</style>
{%- endif -%}